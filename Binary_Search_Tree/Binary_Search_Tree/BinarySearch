//
//  main.c
//  Binary_Search_Tree
//
//  Created by Jaime Jonathan Ortiz Velazco on 06/03/24.
//

#include <stdio.h>
#include <stdlib.h>

struct Node {
    struct Node *lchild;
    int data;
    struct Node *rchild;
} *root = NULL;

void Insert(int key){
    struct Node *t = root;
    struct Node *r, *p;
    
    if(root == NULL){
        p= (struct Node*)malloc(sizeof(struct Node));
        p->data = key;
        p->lchild = p->rchild = NULL;
        root = p;
        return;
    }
    while(t!=NULL){
        r = t;
        if(key < t->data){
            t=t->lchild;
        } else if(key > t->data){
            t=t->rchild;
        } else{
            return;
        }
    }
    p= (struct Node*)malloc(sizeof(struct Node));
    p->data = key;
    p->lchild = p->rchild = NULL;
    
    if(key< r->data){
        r->lchild = p;
    }else{
        r->rchild = p;
    }
}

struct Node *RInsert(struct Node *p, int key){
    struct Node *t = NULL;
    if(p == NULL){
        t = (struct Node*)malloc(sizeof(struct Node));
        t->data = key;
        t->lchild = t->rchild= NULL;
        return t;
    }
    if(key < p->data){
        p->lchild = RInsert(p->lchild, key);
    }else if(key > p->data){
            p->rchild = RInsert(p->rchild, key);
        }
    return p;
}

struct Node * Search(int key){
    struct Node *t=root;
    
    while(t!=NULL){
        if(key == t->data){
            return t;
        } else if(key < t->data){
            t = t->lchild;
        } else{
            t = t->rchild;
        }
    }
    return NULL;
}

void Inorder(struct Node *p){
    if(p){
        Inorder(p->lchild);
        printf("%d ", p->data);
        Inorder(p->rchild);
    }
}

struct Node *Delete(struct Node *p, int key){
    if(key < p->data){
        p->lchild = Delete(p->lchild, key);
    } else if( key> p->data){
        p->rchild = Delete(p->rchild, key);
    }else{
        if(Height(p->lchild) > Height(p->rchild)){
            q=InPre(p->lchild);
            p->data = q->data;
            p->lchild = Delete(p->lchild, q->data);
            
        }
    }
}

int main(int argc, const char * argv[]) {
    struct Node * temp;
    Insert(10);
    Insert(5);
    Insert(20);
    Insert(8);
    Insert(30);
    
    Inorder(root);
    printf("\n");
    temp = Search(20);
    if(temp!= NULL){
        printf("element found %d",temp ->data);
    }else{
        printf("element not found");
    }
    return 0;
}
